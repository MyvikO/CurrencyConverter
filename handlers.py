import re, requests, json, time, random
import keyboards as kb
from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from config import CRYPTO_URL,FIAT_URL, API_TOKEN_CRYPTO, API_TOKEN_FIAT
from currencies import CRYPTO_CURRENCIES, ALL_CURRENCIES, CURRENCY_FLAGS
from redis_client import get_redis

router = Router()

redis_client = get_redis()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏ –≤–∞–ª—é—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def extract_amount_and_currency(text: str) -> tuple[float, str] | None:
    pattern = '(\\d+(?:[.,]\\d+)?)\\s*([\\$‚Ç¨‚ÇΩ‚Ç∏‚Ç¥]|[A-Za-z–ê-–Ø–∞-—è–Å—ë≈Å≈Ç]+(?:\\s+[A-Za-z–ê-–Ø–∞-—è–Å—ë≈Å≈Ç]+){0,2}|[\U0001F1E6-\U0001F1FF]{2})'
    matches = re.search(pattern, text)
    if not matches:
        return None
    try:
        amount_str = matches.group(1)
        amount = float(amount_str.replace(",", "."))
        currency = str(matches.group(2)).strip().upper().replace('–Å', "–ï")
        for code, symbols in ALL_CURRENCIES.items():
            if currency in [s.upper() for s in symbols]:
                return amount, code
    except ValueError:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–∏—á–Ω—ã–π –≤–∏–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def format_money(amount, digits: int):
    NBSP = '\u202F'
    s = format(amount, f",.{digits}f")
    return s + NBSP

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ttl, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_request_fiat
def ttl_from_response(data: dict, default_ttl=1920, max_ttl=43200) -> int:
    now = int(time.time())
    nxt = data.get("time_next_update_unix")
    if isinstance(nxt, (int, float)) and nxt > now:
        ttl = int(nxt - now)
        ttl = max(60, min(ttl, max_ttl))
    else:
        ttl = default_ttl
    ttl += random.randint(0, 30)  # –¥–∂–∏—Ç—Ç–µ—Ä
    return ttl


#–§—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–∏–∞—Ç–∞
def get_request_fiat(url, base_upper):
    key = f"fiat:latest:{base_upper}"
    r = redis_client.get(key)
    if r:
        return json.loads(r)
    r = requests.get(url=url, timeout=5)
    r.raise_for_status()
    rjson = r.json() or []
    ttl = ttl_from_response(rjson)
    redis_client.setex(key, ttl, json.dumps(rjson))
    return rjson

# –§—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
def get_available_fiat(url, headers, timeout):
    key = f"fiat:supported_vs_currencies"
    r = redis_client.get(key)
    if r:
        return json.loads(r)
    r = requests.get(url=url, headers=headers, timeout=timeout)
    r.raise_for_status()
    rjson = r.json() or []
    if not isinstance(rjson, list):
        rjson = []
    redis_client.setex(key, 3600, json.dumps(rjson))
    return rjson

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def currency_converter(amount: float, base_currency: str):
    format_amount = format_money(amount, digits=1)
    base_upper = base_currency.upper()
    base_lower = base_currency.lower()
    if not (0 < amount <= 1_000_000_000):
        return None

    conversion_rates = {}

    # –ó–∞–ø—Ä–æ—Å —Ñ–∏–∞—Ç –≤–∞–ª—é—Ç
    try:
        url = f'{FIAT_URL}/{API_TOKEN_FIAT}/latest/{base_upper}'
        request_fiat = get_request_fiat(url, base_upper)
        if request_fiat:
            conversion_rates = request_fiat.get("conversion_rates", {}) or {}
    except requests.RequestException:
        pass

    # –ó–∞–ø—Ä–æ—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    coin_ids = sorted({v["id"] for v in CRYPTO_CURRENCIES.values() if "id" in v}) # ['bitcoin', 'ethereum', 'solana', 'the-open-network']

    headers = {"accept": "application/json", "x-cg-demo-api-key": API_TOKEN_CRYPTO}

    r1_json = {}

    try:
        if coin_ids:
            r1 = requests.get(
                f"{CRYPTO_URL}/simple/price",
                params={"ids": ",".join(coin_ids), "vs_currencies": base_lower},
                headers=headers, timeout=5
            )
            if r1.ok:
                r1_json = r1.json()
    except requests.RequestException:
        pass

    for symbol, values in CRYPTO_CURRENCIES.items():
        price = None
        if "id" in values:
            data = r1_json.get(values["id"])
            if isinstance(data, dict):
                price = data.get(base_lower)

        if isinstance(price, (int, float)):
            conversion_rates[symbol] = float(price)

    # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: –¥–æ–±–∏—Ä–∞–µ–º –µ—ë —Ü–µ–Ω—É –≤ —Ñ–∏–∞—Ç–∞—Ö
    if base_upper in CRYPTO_CURRENCIES:
        base_asset = CRYPTO_CURRENCIES.get(base_upper, {})
        base_id = base_asset.get("id")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
        vs_supported = set()
        try:
            url = f"{CRYPTO_URL}/simple/supported_vs_currencies"
            request_supported_fiat = get_available_fiat(url=url, headers=headers, timeout=5)
            if request_supported_fiat:
                vs_supported = {s.lower() for s in request_supported_fiat if isinstance(s, str)}
        except requests.RequestException:
            pass

        # –§–∏–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CoinGecko
        fiat_targets = [code for code in ALL_CURRENCIES.keys() if code not in CRYPTO_CURRENCIES]
        fiat_supported = [c for c in fiat_targets if c.lower() in vs_supported]

        if base_id and fiat_supported:
            try:
                r2 = requests.get(
                    f"{CRYPTO_URL}/simple/price",
                    params={"ids": base_id, "vs_currencies": ",".join([c.lower() for c in fiat_supported])},
                    headers=headers, timeout=5
                )
                if r2.ok:
                    r2_json = (r2.json() or {}).get(base_id, {})
                    for fiat_code in fiat_supported:
                        price_in_fiat = r2_json.get(fiat_code.lower())
                        if isinstance(price_in_fiat, (int, float)):
                            conversion_rates[fiat_code] = float(price_in_fiat)
            except requests.RequestException:
                pass
    base_flag = CURRENCY_FLAGS.get(base_upper, "")
    results = []
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ results –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    if conversion_rates:
        for target_currency in ALL_CURRENCIES.keys():
            if target_currency == base_upper:
                continue
            target_flag = CURRENCY_FLAGS.get(target_currency, "")
            if target_currency in CRYPTO_CURRENCIES:
                if target_currency in conversion_rates:
                    rate = float(conversion_rates[target_currency])
                    converted = round(amount / rate, 4)
                    format_converted = format_money(converted, digits=4)
                    results.append(f'{format_amount} {base_currency}{base_flag} = {format_converted} {target_currency}{target_flag}')
            else:
                if target_currency in conversion_rates:
                    rate = float(conversion_rates[target_currency])
                    converted = round(amount * rate, 2)
                    format_converted = format_money(converted, digits=2)
                    results.append(f'{format_amount} {base_currency}{base_flag} = {format_converted} {target_currency}{target_flag}')
    return results or None
# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø CurrencyConverterBot ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Å—É–º–º—ã –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥–∏–µ.\n\n'
                         '–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:\n'
                         ' ‚Ä¢ 25.25 rub\n'
                         ' ‚Ä¢ 25,25—Ä—É–±–ª–µ–π\n'
                         ' ‚Ä¢ 25 usd\n'
                         ' ‚Ä¢ 25 byn\n'
                         ' ‚Ä¢ 25 —Ä—É–±\n'
                         ' ‚Ä¢ 25 —Ç–µ–Ω–≥–µ\n'
                         ' ‚Ä¢ 1 btc\n'
                         ' ‚Ä¢ 1 –±–∏—Ç–∫–æ–∏–Ω')
# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /list, –≤—ã–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
@router.message(Command('list'))
async def list_currencies(message: Message):
    currencies = []
    for curr in ALL_CURRENCIES.keys():
        target_flag = CURRENCY_FLAGS.get(curr)
        currencies.append(f' ‚Ä¢ {curr}{target_flag}')
    await message.answer(f'–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç: \n{'\n'.join(currencies)}')
# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text)
async def summ(message: Message):
    extracted = extract_amount_and_currency(message.text)
    if extracted:
        amount, base_currency = extracted
        conversion_results = currency_converter(amount, base_currency)
        if conversion_results:
            await message.answer('\n'.join(conversion_results), reply_markup=kb.main)
        else:
            await message.answer('–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å')
    else:
        return

@router.callback_query(F.data == "update")
async def update(callback: CallbackQuery):
    old_text = callback.message.text or ""
    extracted = extract_amount_and_currency(old_text)
    if not extracted:
        return await callback.message.edit_text("–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—É–º–º—É/–≤–∞–ª—é—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
    amount, base_currency = extracted
    conversion_results = currency_converter(amount, base_currency)
    if not conversion_results:
        return await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤", show_alert=True)

    new_text = '\n'.join(conversion_results)
    if new_text == old_text:
        return await callback.answer("–ö—É—Ä—Å—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å üëç")

    try:
        await callback.message.edit_text(new_text, reply_markup=kb.main)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            await callback.answer("–ö—É—Ä—Å—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å üëç")
        else:
            raise




