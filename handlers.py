import asyncio
from functools import partial
from aiogram import F , Router
from aiogram.filters import CommandStart,Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from currency_converter import CurrencyConverter
from CurrencyConverterBot import keyboards as kb


router = Router()
c = CurrencyConverter()

class AmountMoney(StatesGroup):
    choosing_amount_money = State()
    choosing_currency = State()

CURRENCIES = {
    'USD': ('USD/–î–æ–ª–ª–∞—Äüá∫üá∏', 'USD'),
    'EUR': ('EUR/–ï–≤—Ä–æüá™üá∫', 'EUR'),
    'JPY': ('JPY/–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞üáØüáµ', 'JPY'),
    'CZK': ('CZK/–ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞üá®üáø', 'CZK'),
    'DKK': ('DKK/–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞üá©üá∞', 'DKK'),
    'GBP': ('GBP/–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤üá¨üáß', 'GBP'),
    'CAD': ('CAD/–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Äüá®üá¶', 'CAD'),
    'CNY': ('CNY/–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—åüá®üá≥', 'CNY'),
    'PHP': ('PHP/–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æüáµüá≠', 'PHP'),
    'MXN': ('MXN/–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–π –ø–µ—Å–æüá≤üáΩ', 'MXN'),
    'INR': ('INR/–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—èüáÆüá≥', 'INR'),
    'TRY': ('TRY/–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞üáπüá∑', 'TRY'),
}
@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç –º–∏—Ä–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –±–∞–Ω–∫–æ–º.üí∏\n\n'
                              '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.üí≤')
    await asyncio.sleep(1)
    await message.reply(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.üíµ \n(–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)')

@router.message(Command('list'))
async def currencies_lists(message: Message):
    all_currencies = [currency_title for _, (currency_title, _) in CURRENCIES.items()]
    await message.answer(f'–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç: \n\n{'\n'.join(all_currencies)}')

@router.message(F.text)
async def summa(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            await message.reply(text='–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è‚ùå. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É')
            return
        if amount > 1_000_000_000:
            await message.reply(text='–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è‚ùå. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–æ 1 –º–∏–ª–ª–∏–∞—Ä–¥–∞')
            return

        await state.update_data(amount=amount)
        await message.reply(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å–≤–æ–µ–π —Å—É–º–º—ãüí±',
            reply_markup=kb.main
        )
        await state.set_state(AmountMoney.choosing_currency)
    except ValueError:
        await message.reply(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùå. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É')


async def convert_and_show(callback: CallbackQuery, state: FSMContext, base_currency: str):
    user_data = await state.get_data()
    amount = user_data.get('amount')
    await callback.answer('')
    await asyncio.sleep(1)
    try:
        results = []
        for currency_code, (currency_name, _) in CURRENCIES.items():
            if currency_code != base_currency:
                converted_amount = c.convert(
                    amount=amount,
                    currency=base_currency,
                    new_currency=currency_code)
                results.append(f"{round(converted_amount, 2)}      {currency_name}")

        await callback.message.edit_text(
            f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {amount} {base_currency} :\n\n' + '\n\n'.join(results)
        )
        await asyncio.sleep(1.5)
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É:')
    except Exception as e:
        await callback.message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É:')
    finally:
        await state.clear()

for currency_code in CURRENCIES:
    handler = partial(convert_and_show, base_currency=currency_code)
    router.callback_query(
        AmountMoney.choosing_currency,
        F.data == currency_code)(handler)
