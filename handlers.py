import asyncio, re, requests, json
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from config import API_TOKEN

router = Router()

CURRENCIES = {
    "USD": ["$", "USD", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä–æ–≤", "–±–∞–∫—Å","–±–∞–∫—Å–æ–≤", "—é–∑–¥", "üá∫üá∏"],
    "EUR": ["‚Ç¨", "EUR", "–µ–≤—Ä–æ", "üá™üá∫"],
    "BYN": ["Br", "BYN", "–±—É–Ω", "–±–µ–ª —Ä—É–±–ª–µ–π", "üáßüáæ"],
    "RUB": ["‚ÇΩ", "RUB", "—Ä—É–±", "—Ä—É–±–ª–µ–π", "—Ä—É–±–ª—å", "üá∑üá∫"],
    "KZT": ["‚Ç∏", "KZT", "—Ç–µ–Ω–≥–µ", "üá∞üáø"],
    "PLN": ["z≈Ç", "PLN", "–∑–ª–æ—Ç—ã—Ö", "üáµüá±"],
    "UAH": ["‚Ç¥", "UAH", "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–µ–Ω", "üá∫üá¶"]
}

CURRENCY_FLAGS = {
    "USD": "üá∫üá∏",
    "EUR": "üá™üá∫",
    "BYN": "üáßüáæ",
    "RUB": "üá∑üá∫",
    "KZT": "üá∞üáø",
    "PLN": "üáµüá±",
    "UAH": "üá∫üá¶"
}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏ –≤–∞–ª—é—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def extract_amount_and_currency(text: str) -> tuple[float, str] | None:
    pattern = r'(\d+[.]\d+|\d+)\s*([a-zA-Z–∞-—è–ê-–Ø]+)'
    matches = re.findall(pattern, text)
    if not matches:
        return None
    try:
        amount = float(matches[0][0])
        currency = str(matches[0][1]).strip().upper()
        for code, symbols in CURRENCIES.items():
            if currency in [s.upper() for s in symbols]:
                return amount, code
    except ValueError:
        return None
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def currency_converter(amount: float, base_currency: str):
    url = f'https://v6.exchangerate-api.com/v6/{API_TOKEN}/latest/{base_currency}'
    try:
        r = requests.get(url=url)
        if r.ok:
            rjson = r.json()
            conversion_rates = rjson["conversion_rates"]
            target_currencies = list(CURRENCIES.keys())
            base_flag = CURRENCY_FLAGS.get(base_currency)
            results = []
        else:
            return None
        if not amount > 1000000000 and amount != 0:
            for target_currency in target_currencies:
                if target_currency == base_currency:
                    continue
                if target_currency in conversion_rates:
                    target_flag = CURRENCY_FLAGS.get(target_currency)
                    operation = amount * conversion_rates[target_currency]
                    results.append(f'{amount} {base_currency}{base_flag} = {round(operation, 2)} {target_currency}{target_flag}')
                else:
                    return None
        else:
            return None
        if results:
            return results
        else:
            return None
    except ValueError:
        return None
# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer('–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É: \n25.25 rub\n25 usd\n25 byn\n25 —Ä—É–±\n25 —Ç–µ–Ω–≥–µ')
# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /list, –≤—ã–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
@router.message(Command('list'))
async def list_currencies(message: Message):
    currencies = []
    for curr in CURRENCIES.keys():
        target_flag = CURRENCY_FLAGS.get(curr)
        currencies.append(f'{curr}{target_flag}')
    await message.answer(f'–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç: \n{'\n'.join(currencies)}')
# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text)
async def summa(message: Message):
    extracted_data = extract_amount_and_currency(message.text)
    if extracted_data:
        amount = extracted_data[0]
        base_currency = extracted_data[1]
        conversion_results = currency_converter(amount, base_currency)
        if conversion_results:
            await message.answer('\n'.join(conversion_results))
        else:
            await message.answer('–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é')
    else:
        return




